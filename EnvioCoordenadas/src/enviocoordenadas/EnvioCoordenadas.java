/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package enviocoordenadas;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeoutException;
import messageendpoint.MessageEndpoint;

/**
 *
 * @author luisg
 */
public class EnvioCoordenadas {
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        try {
            Thread.sleep(60000);
        } catch (InterruptedException e) {
        }
        
        
        List <String> carro1 = Arrays.asList("31.405060000000002,-110.61156000000001","31.40482,-110.61170000000001","31.404760000000003,-110.61179000000001","31.404650000000004,-110.6118","31.404400000000003,-110.61176","31.403360000000003,-110.61161000000001","31.403060000000004,-110.61155000000001","31.402110000000004,-110.61128000000001","31.401780000000002,-110.61116000000001","31.401640000000004,-110.61099000000002","31.401260000000004,-110.61081000000001","31.400350000000003,-110.61062000000001","31.400130000000004,-110.61042","31.399900000000002,-110.61017000000001","31.399540000000002,-110.60995000000001","31.399230000000003,-110.60975","31.39833,-110.60913000000001","31.397230000000004,-110.60832","31.397050000000004,-110.60819000000001","31.39682,-110.60813","31.396580000000004,-110.60786","31.39637,-110.60755","31.395950000000003,-110.60723000000002","31.39534,-110.60678000000001","31.393620000000002,-110.60564000000001","31.39205,-110.60461000000001","31.391830000000002,-110.60446","31.391340000000003,-110.60406","31.39092,-110.60383","31.390860000000004,-110.60379","31.391060000000003,-110.60374000000002","31.3912,-110.60353","31.391350000000003,-110.60303","31.39158,-110.60232","31.39186,-110.60144000000001","31.392250000000004,-110.6003","31.392770000000002,-110.59856","31.39363,-110.59564","31.394440000000003,-110.59319","31.394630000000003,-110.59252000000001","31.39485,-110.59172000000001","31.394830000000002,-110.59171","31.39506,-110.59177000000001","31.395760000000003,-110.59193","31.396990000000002,-110.59223000000001","31.3972,-110.59226000000001","31.39748,-110.59223000000001","31.39805,-110.59205000000001","31.399810000000002,-110.59142000000001","31.40217,-110.59059","31.402680000000004,-110.59043000000001","31.402990000000003,-110.59036","31.40359,-110.59032","31.40397,-110.59034000000001","31.40359,-110.59032","31.402990000000003,-110.59036","31.402680000000004,-110.59043000000001","31.40217,-110.59059","31.399810000000002,-110.59142000000001","31.39805,-110.59205000000001","31.39748,-110.59223000000001","31.3972,-110.59226000000001","31.396990000000002,-110.59223000000001","31.395760000000003,-110.59193","31.39506,-110.59177000000001","31.39485,-110.59172000000001","31.394630000000003,-110.59252000000001","31.394440000000003,-110.59319","31.394090000000002,-110.59424000000001","31.39363,-110.59564","31.393140000000002,-110.59727000000001","31.392250000000004,-110.6003","31.39158,-110.60232","31.391350000000003,-110.60303","31.3912,-110.60353","31.391060000000003,-110.60374000000002","31.390860000000004,-110.60379","31.3913,-110.60404000000001","31.391830000000002,-110.60446","31.392830000000004,-110.60512000000001","31.39551,-110.60689","31.39637,-110.60755","31.396620000000002,-110.60791","31.39682,-110.60813","31.397050000000004,-110.60819000000001","31.397690000000004,-110.60866000000001","31.398450000000004,-110.60921","31.399420000000003,-110.60988","31.399900000000002,-110.61017000000001","31.40021,-110.61051","31.400350000000003,-110.61062000000001","31.40096,-110.61074","31.401260000000004,-110.61081000000001","31.40163,-110.61098000000001","31.401780000000002,-110.61116000000001","31.402240000000003,-110.61132","31.403160000000003,-110.61157000000001","31.404260000000004,-110.61174000000001","31.404650000000004,-110.6118","31.404760000000003,-110.61179000000001","31.40482,-110.61170000000001","31.405060000000002,-110.61156000000001","31.40509,-110.61114","31.405110000000004,-110.61099000000002");
        List <String> carro2 = Arrays.asList("31.40339,-110.59032","31.402990000000003,-110.59036","31.402680000000004,-110.59043000000001","31.40217,-110.59059","31.400630000000003,-110.59114000000001","31.399810000000002,-110.59142000000001","31.398600000000002,-110.59184","31.39748,-110.59223000000001","31.3972,-110.59226000000001","31.396990000000002,-110.59223000000001","31.395760000000003,-110.59193","31.39506,-110.59177000000001","31.39468,-110.59166","31.393590000000003,-110.59123000000001","31.39102,-110.59025000000001","31.39065,-110.59009","31.390470000000004,-110.59","31.390280000000004,-110.58985000000001","31.39007,-110.58968000000002","31.389940000000003,-110.58953000000001","31.388740000000002,-110.58796000000001","31.387520000000002,-110.58635000000001","31.38727,-110.58603000000001","31.387020000000003,-110.58574000000002","31.386750000000003,-110.58555000000001","31.386340000000004,-110.58529000000001","31.384880000000003,-110.58429000000001","31.384280000000004,-110.58389000000001","31.383620000000004,-110.58347","31.383000000000003,-110.58305000000001","31.382210000000004,-110.58251000000001","31.380190000000002,-110.58117000000001","31.379410000000004,-110.58064","31.379060000000003,-110.58038","31.37882,-110.58014000000001","31.378580000000003,-110.57984","31.378460000000004,-110.57963000000001","31.378420000000002,-110.57944","31.378390000000003,-110.57918000000001","31.378410000000002,-110.57892000000001","31.378470000000004,-110.57842000000001","31.37854,-110.57801","31.378670000000003,-110.57748000000001","31.37881,-110.57701000000002","31.37892,-110.57661","31.378950000000003,-110.5764","31.378970000000002,-110.57632000000001","31.378940000000004,-110.57619000000001","31.378860000000003,-110.57601000000001","31.37882,-110.57595","31.378700000000002,-110.57586","31.378590000000003,-110.57574000000001","31.378510000000002,-110.57561000000001","31.378460000000004,-110.57547000000001","31.37845,-110.57538000000001","31.37845,-110.57524000000001","31.378510000000002,-110.57490000000001","31.378750000000004,-110.57345000000001","31.378780000000003,-110.57267","31.378790000000002,-110.57186000000002","31.378950000000003,-110.57115","31.379020000000004,-110.57077000000001","31.379020000000004,-110.57058","31.37899,-110.57025000000002","31.378840000000004,-110.56989000000002","31.37872,-110.56961000000001","31.37843,-110.56958","31.378100000000003,-110.56961000000001","31.377820000000003,-110.56970000000001","31.3776,-110.56982","31.3774,-110.56998000000002");
        List <String> carro3 = Arrays.asList("31.390950000000004,-110.60384","31.39072,-110.60376000000001","31.39035,-110.60367000000001","31.39017,-110.60365000000002","31.389910000000004,-110.60366","31.389670000000002,-110.60377000000001","31.38922,-110.6042","31.388920000000002,-110.60451","31.388370000000002,-110.60525000000001","31.388130000000004,-110.60557000000001","31.388,-110.60572","31.387850000000004,-110.60587000000001","31.38764,-110.60600000000001","31.387400000000003,-110.60609000000001","31.387090000000004,-110.60606000000001","31.386930000000003,-110.60599","31.386750000000003,-110.60584000000001","31.386450000000004,-110.60553000000002","31.386190000000003,-110.60523","31.38614,-110.60518","31.38603,-110.60513","31.385970000000004,-110.60511000000001","31.385690000000004,-110.60521000000001","31.385400000000004,-110.60524000000001","31.38511,-110.60530000000001","31.384610000000002,-110.60532","31.384290000000004,-110.60530000000001","31.38416,-110.60528000000001","31.383210000000002,-110.60490000000001","31.38267,-110.60471000000001","31.381980000000002,-110.60445000000001","31.381550000000004,-110.60424","31.380550000000003,-110.6038","31.380250000000004,-110.60372000000001","31.379960000000004,-110.60369000000001","31.379810000000003,-110.6037","31.37929,-110.60383","31.378640000000004,-110.60423000000002","31.378490000000003,-110.60435000000001","31.378400000000003,-110.60439000000001","31.37824,-110.60442","31.377900000000004,-110.60456","31.377810000000004,-110.60458000000001","31.378000000000004,-110.60471000000001","31.378100000000003,-110.60477","31.378190000000004,-110.60496","31.378320000000002,-110.60585","31.378500000000003,-110.60652","31.378860000000003,-110.60742","31.379220000000004,-110.60776000000001","31.37946,-110.60807000000001","31.379620000000003,-110.60846000000001","31.379910000000002,-110.60915000000001","31.379920000000002,-110.60960000000001","31.38004,-110.60990000000001","31.380330000000004,-110.61028","31.380570000000002,-110.61051","31.38078,-110.61064","31.380830000000003,-110.61084000000001","31.380930000000003,-110.61106000000001","31.38115,-110.61156000000001","31.381270000000004,-110.61170000000001","31.38181,-110.61201000000001","31.382130000000004,-110.61222000000001","31.382420000000003,-110.61250000000001","31.38258,-110.61275","31.38265,-110.61293","31.382820000000002,-110.61323000000002","31.383080000000003,-110.61346","31.38322,-110.61362000000001","31.383340000000004,-110.61395","31.383490000000002,-110.61437000000001","31.383550000000003,-110.61462","31.383480000000002,-110.6149","31.383480000000002,-110.61500000000001","31.38359,-110.61526","31.383670000000002,-110.61537000000001","31.38398,-110.61555000000001","31.38426,-110.61576000000001","31.38464,-110.61617000000001","31.384750000000004,-110.61634000000001","31.384900000000002,-110.61646","31.385040000000004,-110.61665","31.385160000000003,-110.61692000000001","31.385230000000004,-110.61719000000001","31.385270000000002,-110.61746000000001","31.385250000000003,-110.61765000000001","31.38528,-110.61776","31.385410000000004,-110.61792000000001","31.385410000000004,-110.61800000000001","31.38539,-110.61810000000001");

        Thread t1 = new Thread(() -> {
            while (true) {
                try {
                    recorrerHaciaElFrente(carro1, "carro1");
                    recorrerHaciaAtras(carro1, "carro1");
                } catch (IOException | InterruptedException | TimeoutException ex) {
                    System.err.println(ex.getMessage());
                }
            }
        });
        
        Thread t2 = new Thread(() -> {
            while (true) {
                try {
                    recorrerHaciaElFrente(carro2, "carro2");
                    recorrerHaciaAtras(carro2, "carro2");
                } catch (IOException | InterruptedException | TimeoutException ex) {
                    System.err.println(ex.getMessage());
                }
            }
        });
        
        Thread t3 = new Thread(() -> {
            while (true) {
                try {
                    recorrerHaciaElFrente(carro3, "carro3");
                    recorrerHaciaAtras(carro3, "carro3");
                } catch (IOException | InterruptedException | TimeoutException ex) {
                    System.err.println(ex.getMessage());
                }
            }
        });
        
        t1.start();
        t2.start();
        t3.start();
    }
    
    
    public static void recorrerHaciaElFrente(List<String> carro, String cola) throws InterruptedException, IOException, TimeoutException {
        MessageEndpoint endpoint = new MessageEndpoint();
        
        for (int i = 0; i < carro.size(); i++) {
            endpoint.enviar(carro.get(i), cola);
            Thread.sleep(2000);
        }  
    }
    
    public static void recorrerHaciaAtras(List<String> carro, String cola) throws InterruptedException, IOException, TimeoutException {
        MessageEndpoint endpoint = new MessageEndpoint();
        
        for (int i = carro.size() - 1; i >= 0; i--) {
            endpoint.enviar(carro.get(i), cola);
            Thread.sleep(2000);
        }
    }
}
